# Leetcode's code - Color extraction from CSS code

import re

def read_css_lines():
    """Reads CSS lines from input until an empty line is encountered."""
    css_lines = []
    while True:
        try:
            line = input().strip()
            if not line:
                break
            css_lines.append(line)
        except EOFError:
            break
    return css_lines

def extract_color_codes(css_lines):
    """Extracts hex color codes from CSS lines."""
    hex_color_pattern = r'#[0-9a-fA-F]{3,6}'
    color_codes = []
    for line in css_lines:
        color_codes.extend(re.findall(hex_color_pattern, line))
    return color_codes

def main():
    print("Enter CSS lines:")
    css_lines = read_css_lines()
    print("CSS Lines:", css_lines)

    color_codes = extract_color_codes(css_lines)
    print("Color Codes:", color_codes)

if __name__ == "__main__":
    main()

Leetcode's code - Add 2 numbers in a linked list

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode()
    current = dummy
    carry = 0
    
    while l1 or l2 or carry:
        sum = carry
        if l1:
            sum += l1.val
            l1 = l1.next
        if l2:
            sum += l2.val
            l2 = l2.next
        
        carry = sum // 10
        current.next = ListNode(sum % 10)
        current = current.next
    
    return dummy.next

# Function to print the linked list for testing
def printLinkedList(node):
    while node:
        print(node.val, end=" ")
        node = node.next
    print()

# Test cases
l1 = ListNode(2, ListNode(4, ListNode(3)))
l2 = ListNode(5, ListNode(6, ListNode(4)))
print("Input:")
print("l1: ", end="")
printLinkedList(l1)
print("l2: ", end="")
printLinkedList(l2)
result = addTwoNumbers(l1, l2)
print("Output:")
printLinkedList(result)
